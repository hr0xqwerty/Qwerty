declare function b64UrlToString(b64UrlString: string): string;
declare function bufferToString(buffer: Uint8Array | ArrayBuffer): string;
declare function stringToBuffer(string: string): Uint8Array;
declare function stringToB64Url(string: string): string;
declare function b64UrlToBuffer(b64UrlString: string): Uint8Array;
declare function bufferTob64(buffer: Uint8Array): string;
declare function bufferTob64Url(buffer: Uint8Array): string;
declare function b64UrlEncode(b64UrlString: string): string;
declare function b64UrlDecode(b64UrlString: string): string;
export declare const ArweaveUtils: {
    b64UrlToString: typeof b64UrlToString;
    bufferToString: typeof bufferToString;
    stringToBuffer: typeof stringToBuffer;
    stringToB64Url: typeof stringToB64Url;
    b64UrlToBuffer: typeof b64UrlToBuffer;
    bufferTob64: typeof bufferTob64;
    bufferTob64Url: typeof bufferTob64Url;
    b64UrlEncode: typeof b64UrlEncode;
    b64UrlDecode: typeof b64UrlDecode;
};
declare class BaseObject {
    [key: string]: any;
    get(field: string): string;
    get(field: string, options: {
        decode: true;
        string: false;
    }): Uint8Array;
    get(field: string, options: {
        decode: true;
        string: true;
    }): string;
}
export declare class Tag extends BaseObject {
    readonly name: string;
    readonly value: string;
    constructor(name: string, value: string, decode?: boolean);
}
export {};
