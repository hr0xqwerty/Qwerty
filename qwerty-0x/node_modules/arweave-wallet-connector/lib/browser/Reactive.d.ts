import { AppInfo } from '../types.js';
import BrowserConnector from './Connector.js';
export declare type State = {
    url?: string;
    address?: string;
    connected: boolean;
    showIframe: boolean;
    usePopup: boolean;
    requirePopup: boolean;
    keepPopup: boolean;
};
declare type StateFunction<T> = (state: T) => any;
declare type Ref<T> = {
    value: T;
};
declare type VueRef<T> = Ref<T | undefined>;
declare type SvelteStore<T> = {
    subscribe: (param: StateFunction<T>) => any;
    set: StateFunction<T>;
};
declare type ReactState<T> = [state: T, setState: StateFunction<T>];
declare type AnyReactive<T> = T | VueRef<T> | SvelteStore<T> | ReactState<T>;
declare type Options = {
    state?: AnyReactive<Partial<State>>;
    localStorageKey?: string | false;
};
export declare class ReactiveConnector extends BrowserConnector {
    private static _instance;
    private _state;
    private _setState?;
    private _subs;
    private _localStorageKey;
    constructor(appInfo?: AppInfo, options?: Options);
    setUrl: (connectToUrl: string | URL, load?: boolean) => void;
    subscribe: (handler: StateFunction<State>) => () => any[];
    private setState;
    private updateState;
}
export {};
