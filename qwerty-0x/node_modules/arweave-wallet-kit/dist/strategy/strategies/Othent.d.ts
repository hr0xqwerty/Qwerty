import type { SignatureOptions } from "arweave/node/lib/crypto/crypto-interface";
import type { DataItem, DispatchResult, GatewayConfig, PermissionType } from "arconnect";
import type Transaction from "arweave/web/lib/transaction";
import type { AppInfo } from "arweave-wallet-connector";
import type Strategy from "../Strategy";
import { OthentOptions } from "@othent/kms";
type ListenerFunction = (address: string) => void;
export default class OthentStrategy implements Strategy {
    #private;
    id: "othent";
    name: string;
    description: string;
    theme: string;
    logo: string;
    url: string;
    constructor();
    __overrideOthentOptions(othentOptions: OthentOptions): void;
    isAvailable(): Promise<boolean>;
    connect(permissions: PermissionType[], appInfo?: AppInfo, gateway?: GatewayConfig): Promise<undefined>;
    disconnect(): Promise<void>;
    getActiveAddress(): Promise<"" | import("@othent/kms").B64UrlString>;
    getActivePublicKey(): Promise<"" | import("@othent/kms").B64UrlString>;
    getAllAddresses(): Promise<import("@othent/kms").B64UrlString[]>;
    getWalletNames(): Promise<Record<import("@othent/kms").B64UrlString, string>>;
    userDetails(): Promise<import("@othent/kms").UserDetails | null>;
    sign(transaction: Transaction, options?: SignatureOptions): Promise<Transaction>;
    dispatch(transaction: Transaction): Promise<DispatchResult>;
    signDataItem(p: DataItem): Promise<ArrayBuffer>;
    encrypt(data: BufferSource, options: RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams): Promise<Uint8Array>;
    decrypt(data: BufferSource, options: RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams): Promise<Uint8Array>;
    signature(data: Uint8Array, options: AlgorithmIdentifier | RsaPssParams | EcdsaParams): Promise<Uint8Array>;
    getArweaveConfig(): Promise<GatewayConfig>;
    getPermissions(): Promise<import("@othent/kms").PermissionType[]>;
    addToken(id: string): Promise<void>;
    addAddressEvent(listener: ListenerFunction): any;
    removeAddressEvent(listener: (e: CustomEvent<{
        address: string;
    }>) => void): void;
}
export {};
